from web3 import Web3

# Connect to an Ethereum node (replace with your Ethereum node URL)
web3 = Web3(Web3.HTTPProvider('http://localhost:7545'))

# Define the smart contract's ABI and bytecode
# contract_abi = [{"inputs": [{"internalType": "string", "name": "imageHash", "type": "string"}], "name": "getBlockchainAddress", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "string", "name": "", "type": "string"}], "name": "imageHashToBlockchainAddress", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "string", "name": "imageHash", "type": "string"}, {"internalType": "string", "name": "blockchainAddress", "type": "string"}], "name": "storeImageHash", "outputs": [], "stateMutability": "nonpayable", "type": "function"}]  # Paste your smart contract ABI here


contract_abi = [{"anonymous": False, "inputs": [{"indexed": True, "internalType": "uint256", "name": "index", "type": "uint256"}, {"indexed": False, "internalType": "string", "name": "imageHash", "type": "string"}, {"indexed": False, "internalType": "string", "name": "blockchainAddress", "type": "string"}], "name": "DataStored", "type": "event"}, {"inputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "name": "dataEntries", "outputs": [{"internalType": "string", "name": "imageHash", "type": "string"}, {"internalType": "string", "name": "blockchainAddress", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "index", "type": "uint256"}], "name": "getDataEntry", "outputs": [{"internalType": "string", "name": "", "type": "string"}, {"internalType": "string", "name": "", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getNumEntries", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "numEntries", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "string", "name": "imageHash", "type": "string"}, {"internalType": "string", "name": "blockchainAddress", "type": "string"}], "name": "storeImageHash", "outputs": [], "stateMutability": "nonpayable", "type": "function"}]



contract_bytecode = "608060405234801561001057600080fd5b5061097d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806309e2d1a61461005c578063325f46581461007a57806333c75f02146100ab578063d32a27d5146100c7578063f75d8ada146100e5575b600080fd5b610064610116565b6040516100719190610733565b60405180910390f35b610094600480360381019061008f919061062b565b610120565b6040516100a29291906106dc565b60405180910390f35b6100c560048036038101906100c091906105bf565b610254565b005b6100cf610312565b6040516100dc9190610733565b60405180910390f35b6100ff60048036038101906100fa919061062b565b610318565b60405161010d9291906106dc565b60405180910390f35b6000600154905090565b600060205280600052604060002060009150905080600001805461014390610817565b80601f016020809104026020016040519081016040528092919081815260200182805461016f90610817565b80156101bc5780601f10610191576101008083540402835291602001916101bc565b820191906000526020600020905b81548152906001019060200180831161019f57829003601f168201915b5050505050908060010180546101d190610817565b80601f01602080910402602001604051908101604052809291908181526020018280546101fd90610817565b801561024a5780601f1061021f5761010080835404028352916020019161024a565b820191906000526020600020905b81548152906001019060200180831161022d57829003601f168201915b5050505050905082565b6040518060400160405280838152602001828152506000806001548152602001908152602001600020600082015181600001908051906020019061029992919061049f565b5060208201518160010190805190602001906102b692919061049f565b509050506001547fd9e9e143ccff5989bb8282525cabad6fdd8f4f68398b457373311b9bd9093dce83836040516102ee9291906106dc565b60405180910390a26001600081548092919061030990610849565b91905055505050565b60015481565b606080600154831061035f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035690610713565b60405180910390fd5b60008060008581526020019081526020016000209050806000018160010181805461038990610817565b80601f01602080910402602001604051908101604052809291908181526020018280546103b590610817565b80156104025780601f106103d757610100808354040283529160200191610402565b820191906000526020600020905b8154815290600101906020018083116103e557829003601f168201915b5050505050915080805461041590610817565b80601f016020809104026020016040519081016040528092919081815260200182805461044190610817565b801561048e5780601f106104635761010080835404028352916020019161048e565b820191906000526020600020905b81548152906001019060200180831161047157829003601f168201915b505050505090509250925050915091565b8280546104ab90610817565b90600052602060002090601f0160209004810192826104cd5760008555610514565b82601f106104e657805160ff1916838001178555610514565b82800160010185558215610514579182015b828111156105135782518255916020019190600101906104f8565b5b5090506105219190610525565b5090565b5b8082111561053e576000816000905550600101610526565b5090565b60006105556105508461077f565b61074e565b90508281526020810184848401111561056d57600080fd5b6105788482856107d5565b509392505050565b600082601f83011261059157600080fd5b81356105a1848260208601610542565b91505092915050565b6000813590506105b981610930565b92915050565b600080604083850312156105d257600080fd5b600083013567ffffffffffffffff8111156105ec57600080fd5b6105f885828601610580565b925050602083013567ffffffffffffffff81111561061557600080fd5b61062185828601610580565b9150509250929050565b60006020828403121561063d57600080fd5b600061064b848285016105aa565b91505092915050565b600061065f826107af565b61066981856107ba565b93506106798185602086016107e4565b6106828161091f565b840191505092915050565b600061069a6012836107ba565b91507f496e646578206f7574206f662072616e676500000000000000000000000000006000830152602082019050919050565b6106d6816107cb565b82525050565b600060408201905081810360008301526106f68185610654565b9050818103602083015261070a8184610654565b90509392505050565b6000602082019050818103600083015261072c8161068d565b9050919050565b600060208201905061074860008301846106cd565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610775576107746108f0565b5b8060405250919050565b600067ffffffffffffffff82111561079a576107996108f0565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156108025780820151818401526020810190506107e7565b83811115610811576000848401525b50505050565b6000600282049050600182168061082f57607f821691505b60208210811415610843576108426108c1565b5b50919050565b6000610854826107cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561088757610886610892565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610939816107cb565b811461094457600080fd5b5056fea264697066735822122025827344de96dbb17b37ee1ced28ac8c17e0f6ad435759e7fede5b6eca1a494e64736f6c63430008000033"
# Define the Ethereum account from which you'll deploy the contract

private_key = "0x074682f4facd855d0499841dfd5a0fc6b8347c4a117f9359d8d178be19909ab2"
# account = web3.eth.account.privateKeyToAccount(private_key)

# Create an Account object from the private key
account = web3.eth.account.from_key(private_key)


# Get the public address of the account
public_address = account.address



# Deploy the smart contract
contract = web3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
tx_hash = contract.constructor().transact({'from': account.address, 'gas': 2000000})
# tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

# The smart contract is deployed at tx_receipt.contractAddress
contract_address = tx_receipt.contractAddress

# Print the public address
print("public_address", public_address)
print(f"Smart Contract Address: {contract_address}")

